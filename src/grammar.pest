whitespace = _{ " " | "\n" | "\t" }

// Identifier
alpha = _{ ('a'..'z') | ('A'..'Z') }
ident = @{ !keyword ~ ( alpha | "_" )+ ~ !"." }
p_ident = @{ !keyword ~ ( alpha | "_" )+ }

// Keywords
val_zero = { "0" }
val_true = { "true" }
val_false = { "false" }
key_if = _{ "if" }
key_then = _{ "then" }
key_else = _{ "else" }
op_succ = { "succ" }
op_pred = { "pred" }
is_zero = _{ "iszero" }
type_bool = { "Bool" }
type_nat = { "Nat" }
ascribe = _{ "as" }
case = _{ "case" }
of = _{ "of" }
fix = _{ "fix" }
keyword = _{ val_zero | val_true | val_false | key_if | key_else | key_then | op_succ | op_pred | is_zero | type_bool | type_nat | ascribe | case | of | fix }

program = { soi ~ application ~ eoi }

// Terms
application = { var_abstr ~ application* }
//TODO rename var_abstr to term
var_abstr = _{ variable | abstraction | record | projection | tagging | matching | fixpoint }
abstraction = { "("* ~ "@" ~ type_term ~ "." ~ application ~ ")"? }
record = { "{" ~ (record_el ~ ",")* ~ record_el ~ "}" }
record_el = { ident ~ "=" ~ application }
projection = ${ projection_target ~ "." ~ ident }
projection_target = _{ p_ident | record | "(" ~ application ~ ")" }
tagging = { "<" ~ ident ~ "=" ~ application ~ ">" ~ ascribe ~ type_ass }
matching = { case ~ application ~ of ~ (case_el ~ "|")* ~ case_el }
case_el = { "<" ~ ident ~ "=" ~ ident ~ ">" ~ "=>" ~ application }
fixpoint = { fix ~ "|" ~ application ~ "|" }

// Types
type_term = { ident ~ ":" ~ type_ass }
type_ass = _{ type_nat | type_bool | type_arrow | type_record | type_variant }
type_arrow = { "(" ~ type_ass ~ "->" ~ type_ass ~ ")" }
type_record = { "{" ~ (type_term ~ ",")* ~ type_term ~ "}" }
type_variant = { "<"~ (type_term ~ ",")* ~ type_term ~ ">"}

// Values
variable = _{ val_zero | val_true | val_false | ident | if_then | zero_check | arithmetic | paren_var }
if_then = { key_if ~ application ~ key_then ~ application ~ key_else ~ application }
zero_check = { is_zero ~ application }
paren_var = _{ "(" ~ variable ~ ")" }
arithmetic = { operator ~ application }
operator = _{ op_succ | op_pred }

