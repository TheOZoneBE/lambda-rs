whitespace = _{ " " | "\n" | lparen | rparen }

// useful
ident = { !keyword ~ ('a'..'z')+ }
lambda = { "Î»" }
dot = { "." }
lparen = { "(" }
rparen = { ")" }
colon = { ":" }


//keywords
val_zero = { "0" }
val_true = { "true" }
val_false = { "false" }
key_if = { "if" }
key_then = { "then" }
key_else = { "else" }
op_succ = { "succ" }
op_pred = { "pred" }
is_zero = { "iszero" }
type_bool = { "Bool" }
type_nat = { "Nat" }

type_term = { type_bool | type_nat }

keyword = _{ val_zero | val_true | val_false | key_if | key_else | key_then | op_succ | op_pred | is_zero | type_bool | type_nat }

program = { soi ~ application ~ eoi }

application = { var_abstr ~ application* }

var_abstr = { variable | abstraction }

abstraction = { lambda ~ ident ~ colon ~ type_term ~ dot ~ application }

variable = { val_zero | val_true | val_false | ident | if_then | zero_check | arithmetic }

if_then = { key_if ~ application ~ key_then ~ application ~ key_else ~ application }

zero_check = { is_zero ~ application }

operator = { op_succ | op_pred }

arithmetic = { operator ~ application }

token_list = _{ ( ident | lambda | dot | lparen | rparen | colon | val_zero | val_true | val_false | key_if | key_else | key_then | op_succ | op_pred | is_zero | type_bool | type_nat )* }