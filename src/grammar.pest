whitespace = _{ " " | "\n" | "\t" }

// Identifier
ident = { !keyword ~ ('a'..'z')+ }

// Keywords
val_zero = { "0" }
val_true = { "true" }
val_false = { "false" }
key_if = _{ "if" }
key_then = _{ "then" }
key_else = _{ "else" }
op_succ = { "succ" }
op_pred = { "pred" }
is_zero = _{ "iszero" }
type_bool = { "Bool" }
type_nat = { "Nat" }
keyword = _{ val_zero | val_true | val_false | key_if | key_else | key_then | op_succ | op_pred | is_zero | type_bool | type_nat }

program = { soi ~ application ~ eoi }

// Terms
application = { var_abstr ~ application* }
var_abstr = _{ variable | abstraction }
abstraction = { "("* ~ "Î»" ~ ident ~ ":" ~ type_ass ~ "." ~ application ~ ")"? }

// Types
type_ass = _{ type_nat | type_bool | type_arrow }
type_arrow = { "(" ~ type_ass ~ "->" ~ type_ass ~ ")" }

// Values
variable = _{ val_zero | val_true | val_false | ident | if_then | zero_check | arithmetic | paren_var }
if_then = { key_if ~ application ~ key_then ~ application ~ key_else ~ application }
zero_check = { is_zero ~ application }
paren_var = _{ "(" ~ variable ~ ")" }
arithmetic = { operator ~ application }
operator = _{ op_succ | op_pred }

